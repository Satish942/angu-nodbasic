1
00:00:01,826 --> 00:00:03,923
<v Male Instructor>It would be nice to be able to</v>

2
00:00:03,923 --> 00:00:07,226
get the value we enter into the input components

3
00:00:07,226 --> 00:00:08,711
so this new message,

4
00:00:08,711 --> 00:00:11,906
entity array of messages we already got.

5
00:00:11,906 --> 00:00:15,551
For this, we will use services and dependency injection

6
00:00:15,551 --> 00:00:17,620
and before showing this in action,

7
00:00:17,620 --> 00:00:21,030
let me explain what this actually is.

8
00:00:21,030 --> 00:00:22,552
Let's consider our application

9
00:00:22,552 --> 00:00:24,047
where we have a couple of components:

10
00:00:24,047 --> 00:00:26,270
component one, two and three.

11
00:00:26,270 --> 00:00:28,511
And each of these components will have, lets say,

12
00:00:28,511 --> 00:00:32,740
a method and a property or a variable here.

13
00:00:32,740 --> 00:00:35,351
Now, as you can see, for all three components

14
00:00:35,351 --> 00:00:36,611
this is the same.

15
00:00:36,611 --> 00:00:38,762
We use the same method, with the same variable.

16
00:00:38,762 --> 00:00:41,426
So we do have exactly the same code.

17
00:00:41,426 --> 00:00:43,487
Now that is of course duplicate code,

18
00:00:43,487 --> 00:00:45,431
which is hard to keep in sync

19
00:00:45,431 --> 00:00:47,634
if this depends on each other.

20
00:00:47,634 --> 00:00:50,056
It's also hard to maintain because

21
00:00:50,056 --> 00:00:52,026
if we change it in one place,

22
00:00:52,026 --> 00:00:55,079
we need to change it in three places.

23
00:00:55,079 --> 00:00:58,670
For such a case, we have this concept called

24
00:00:58,670 --> 00:01:00,566
services in latitude.

25
00:01:00,566 --> 00:01:04,884
Which allows us to outsource certain tasks, data

26
00:01:04,884 --> 00:01:07,487
whatever, into a single class,

27
00:01:07,487 --> 00:01:10,996
which we then can use in multiple places of our application,

28
00:01:10,996 --> 00:01:12,984
in multiple components, let's say.

29
00:01:12,984 --> 00:01:14,371
So in such a service,

30
00:01:14,371 --> 00:01:17,808
we store this method A with its variable

31
00:01:17,808 --> 00:01:20,330
and then we are able to inject the service

32
00:01:20,330 --> 00:01:22,895
into the components where we need it.

33
00:01:22,895 --> 00:01:26,162
All these components do have access to the service then,

34
00:01:26,162 --> 00:01:28,907
and we can also choose if we want to provide it

35
00:01:28,907 --> 00:01:30,753
on a per component level,

36
00:01:30,753 --> 00:01:33,921
which would give us free instances of the service class.

37
00:01:33,921 --> 00:01:35,890
So three different instances with

38
00:01:35,890 --> 00:01:39,914
three different variables, so the data will be different.

39
00:01:39,914 --> 00:01:43,038
Or, if we want to provide it on the application level

40
00:01:43,038 --> 00:01:44,855
with only one instance,

41
00:01:44,855 --> 00:01:47,294
which means every component has access to it,

42
00:01:47,294 --> 00:01:49,338
but the data is shared.

43
00:01:49,338 --> 00:01:54,204
We're going to use such a service to get our new content,

44
00:01:54,204 --> 00:01:57,059
or new message from one component to the other

45
00:01:57,059 --> 00:01:59,454
and to store all our content,

46
00:01:59,454 --> 00:02:03,106
all our messages, in such a central service,

47
00:02:03,106 --> 00:02:06,383
which holds it as our data repository.

48
00:02:06,383 --> 00:02:10,550
Well, lets see this in action in the next videos.

