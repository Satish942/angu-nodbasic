1
00:00:02,051 --> 00:00:04,977
<v Instructor>Our application really developed nicely.</v>

2
00:00:04,977 --> 00:00:08,738
We are now able to set up our own messages here

3
00:00:08,738 --> 00:00:10,044
and save them here.

4
00:00:10,044 --> 00:00:12,105
Deleting and editing does not really work,

5
00:00:12,105 --> 00:00:14,841
but we will get this to work, too.

6
00:00:14,841 --> 00:00:18,403
Before doing so, let's have a look at the input component

7
00:00:18,403 --> 00:00:19,486
again though.

8
00:00:20,411 --> 00:00:23,713
It works that if we click here, we add it,

9
00:00:23,713 --> 00:00:28,488
but what doesn't work is it doesn't clear this input here.

10
00:00:28,488 --> 00:00:32,951
Also it would allow us to submit an empty field.

11
00:00:32,951 --> 00:00:35,488
And both is not really what I want.

12
00:00:35,488 --> 00:00:38,726
So we can enhance this by using in our feature

13
00:00:38,726 --> 00:00:41,175
Angular 2 offers us, forms.

14
00:00:41,175 --> 00:00:43,367
Angular 2 makes the creation and management

15
00:00:43,367 --> 00:00:44,803
of forms very easy,

16
00:00:44,803 --> 00:00:48,089
and indeed it offers two approaches to do so,

17
00:00:48,089 --> 00:00:50,908
the template driven approach and the date driven,

18
00:00:50,908 --> 00:00:53,149
or reactive approach.

19
00:00:53,149 --> 00:00:55,709
I will show you both, but for this form,

20
00:00:55,709 --> 00:00:58,485
I wanna start with the template driven approach.

21
00:00:58,485 --> 00:01:00,318
So let's work on that.

22
00:01:01,220 --> 00:01:03,281
The template driven approach is named

23
00:01:03,281 --> 00:01:06,003
template driven approach because it uses

24
00:01:06,003 --> 00:01:08,944
this template to create the form.

25
00:01:08,944 --> 00:01:11,536
Basically, we create the form

26
00:01:11,536 --> 00:01:13,746
just like you always create forms.

27
00:01:13,746 --> 00:01:15,901
Add, a form element here,

28
00:01:15,901 --> 00:01:19,043
let's simply delete the action because we're not going

29
00:01:19,043 --> 00:01:21,215
to submit this directly to the server,

30
00:01:21,215 --> 00:01:23,535
Angular 2 will handle this form.

31
00:01:23,535 --> 00:01:25,424
And then let's copy all that code

32
00:01:25,424 --> 00:01:28,514
and paste it in there into the form.

33
00:01:28,514 --> 00:01:32,034
Now with that, we quickly created the form in HTML,

34
00:01:32,034 --> 00:01:33,622
in the template.

35
00:01:33,622 --> 00:01:36,412
And Angular 2 is clever enough to automatically detect

36
00:01:36,412 --> 00:01:37,705
this form.

37
00:01:37,705 --> 00:01:40,164
It detects the form element here,

38
00:01:40,164 --> 00:01:43,692
and derives that we want to use a form here,

39
00:01:43,692 --> 00:01:47,219
and automatically constructs the form in the background.

40
00:01:47,219 --> 00:01:49,988
What do I mean with constructs the form?

41
00:01:49,988 --> 00:01:52,702
Well, Angular 2 manages the form for us,

42
00:01:52,702 --> 00:01:55,523
and for this, it tracks the validity of the form,

43
00:01:55,523 --> 00:01:58,423
the current value, and much more.

44
00:01:58,423 --> 00:02:01,967
All of that is stored in a form JavaScript object

45
00:02:01,967 --> 00:02:04,463
Angular 2 creates for us automatically.

46
00:02:04,463 --> 00:02:06,580
And this is what I mean with that.

47
00:02:06,580 --> 00:02:09,005
It creates this object for us and stores it,

48
00:02:09,005 --> 00:02:12,875
simply because it detects this form element.

49
00:02:12,875 --> 00:02:15,510
We can override this behaviour as you will learn later,

50
00:02:15,510 --> 00:02:18,511
but for now, let's take advantage of it.

51
00:02:18,511 --> 00:02:21,594
This form here is a very simple form,

52
00:02:22,539 --> 00:02:25,812
but while Angular 2 does detect the form element,

53
00:02:25,812 --> 00:02:28,370
it does not detect the inputs for us.

54
00:02:28,370 --> 00:02:31,187
It certainly could do that, but you might have a form

55
00:02:31,187 --> 00:02:33,839
where you don't want to register all the inputs

56
00:02:33,839 --> 00:02:35,508
as form inputs.

57
00:02:35,508 --> 00:02:39,665
Or maybe you have a custom component which holds your input,

58
00:02:39,665 --> 00:02:41,263
so it doesn't do that.

59
00:02:41,263 --> 00:02:43,657
You have to tell Angular 2 which parts

60
00:02:43,657 --> 00:02:48,341
of the form are actually inputs you want to register.

61
00:02:48,341 --> 00:02:50,700
This is very simple to do though.

62
00:02:50,700 --> 00:02:52,539
Let me remove this local reference.

63
00:02:52,539 --> 00:02:55,636
I'm not going to use this approach anymore.

64
00:02:55,636 --> 00:02:59,833
Instead in order to tell Angular 2 that this input here,

65
00:02:59,833 --> 00:03:02,512
just going to restructure it to make it easier to read,

66
00:03:02,512 --> 00:03:04,581
that this input here should be a control

67
00:03:04,581 --> 00:03:07,075
as it is called of that form.

68
00:03:07,075 --> 00:03:10,811
I simply add ngModel to it, like this.

69
00:03:10,811 --> 00:03:12,201
Do you recognise this?

70
00:03:12,201 --> 00:03:14,966
We used it before though with squared brackets

71
00:03:14,966 --> 00:03:16,801
and parenthesis.

72
00:03:16,801 --> 00:03:19,484
Without that, all it does is,

73
00:03:19,484 --> 00:03:22,234
it tells Angular 2, hey this input

74
00:03:22,234 --> 00:03:25,334
on which ngModel is placed, should be registered

75
00:03:25,334 --> 00:03:29,912
as a control of the form which was automatically derived

76
00:03:29,912 --> 00:03:30,995
by Angular 2.

77
00:03:31,943 --> 00:03:34,570
Now for that to work, it is important

78
00:03:34,570 --> 00:03:36,935
that you have the form's module added

79
00:03:36,935 --> 00:03:40,110
to the import's array in the app module though.

80
00:03:40,110 --> 00:03:43,325
We already do have that, but I just want to highlight this.

81
00:03:43,325 --> 00:03:45,655
This is important.

82
00:03:45,655 --> 00:03:50,079
So with this, what I can do now is add another thing here,

83
00:03:50,079 --> 00:03:54,077
a normal attribute, the name attribute.

84
00:03:54,077 --> 00:03:56,028
And I'll give this a name of content.

85
00:03:56,028 --> 00:03:57,699
This is a normal HTML attribute,

86
00:03:57,699 --> 00:03:59,322
has nothing to do with Angular 2

87
00:03:59,322 --> 00:04:02,242
though Angular 2 will automatically detect it

88
00:04:02,242 --> 00:04:06,159
to store this value of this input on a control.

89
00:04:07,033 --> 00:04:11,162
It gives this name which we assign here.

90
00:04:11,162 --> 00:04:13,792
With that we're storing our content.

91
00:04:13,792 --> 00:04:16,751
But it would be nice to be able to now do something

92
00:04:16,751 --> 00:04:18,698
when we hit the submit button.

93
00:04:18,698 --> 00:04:20,303
We do have a click listener here,

94
00:04:20,303 --> 00:04:23,715
but this is not how you actually handle the form submissions

95
00:04:23,715 --> 00:04:25,487
so let's delete it.

96
00:04:25,487 --> 00:04:27,880
Instead, Angular 2 gives us a new directive

97
00:04:27,880 --> 00:04:30,727
which exposes an event we can use here.

98
00:04:30,727 --> 00:04:33,334
It's called ngSubmit and it should be enclosed

99
00:04:33,334 --> 00:04:37,315
in parenthesis since it is an event here.

100
00:04:37,315 --> 00:04:40,672
There we could execute onSubmit,

101
00:04:40,672 --> 00:04:44,839
and therefore let's rename this onSave method to onSubmit.

102
00:04:46,736 --> 00:04:50,071
Now as you see we no longer pass the value

103
00:04:50,071 --> 00:04:51,940
of our form like this.

104
00:04:51,940 --> 00:04:53,173
Now we could use two-way binding

105
00:04:53,173 --> 00:04:55,083
to get access to the contents stored

106
00:04:55,083 --> 00:04:57,134
in the property automatically,

107
00:04:57,134 --> 00:04:58,242
but I don't want to do that.

108
00:04:58,242 --> 00:05:01,106
I don't want to update a property on every keystroke.

109
00:05:01,106 --> 00:05:02,440
I only want to pass this

110
00:05:02,440 --> 00:05:05,019
when we actually hit the submit button.

111
00:05:05,019 --> 00:05:09,582
So how do I pass the form Angular 2 creates for us

112
00:05:09,582 --> 00:05:11,999
to this onSubmit method here?

113
00:05:12,884 --> 00:05:15,162
We can use a nice little trick

114
00:05:15,162 --> 00:05:18,829
or simple approach Angular 2 offers us here.

115
00:05:19,677 --> 00:05:22,475
I can assign a local reference to this form,

116
00:05:22,475 --> 00:05:26,181
as before with the hashtag and then any name of your choice.

117
00:05:26,181 --> 00:05:27,598
Here is simply f.

118
00:05:28,563 --> 00:05:32,066
This would give us access to this form HTML element,

119
00:05:32,066 --> 00:05:36,172
but I want to get access to the form Angular 2 created

120
00:05:36,172 --> 00:05:37,927
in the background.

121
00:05:37,927 --> 00:05:42,094
I can get this access by assigning equal and then ngForm.

122
00:05:43,331 --> 00:05:46,929
With this command I'm basically telling Angular 2

123
00:05:46,929 --> 00:05:51,316
don't give me access to this form HTML element.

124
00:05:51,316 --> 00:05:54,062
Instead give me access to the JavaScript object

125
00:05:54,062 --> 00:05:56,645
you, Angular 2, created for me.

126
00:05:57,781 --> 00:06:00,765
And then I can pass this local reference

127
00:06:00,765 --> 00:06:03,976
or this form to the onSubmit method

128
00:06:03,976 --> 00:06:05,445
and here in my component,

129
00:06:05,445 --> 00:06:08,590
I know that I will get the form as an argument,

130
00:06:08,590 --> 00:06:11,054
which is of type ngForm which needs

131
00:06:11,054 --> 00:06:14,887
to be imported from @angular/forms,

132
00:06:16,012 --> 00:06:18,595
and then in here, I can simply,

133
00:06:19,987 --> 00:06:23,404
console.log

134
00:06:23,404 --> 00:06:28,011
and I will comment out the outer lines for now.

135
00:06:28,011 --> 00:06:31,756
Let's see what happens if I now reload the application,

136
00:06:31,756 --> 00:06:35,923
open up the console and type something here and hit save.

137
00:06:37,291 --> 00:06:39,569
You now see we indeed get an object

138
00:06:39,569 --> 00:06:43,041
of type ngForm submitted, and this is the form

139
00:06:43,041 --> 00:06:47,277
Angular 2 created in the background for us.

140
00:06:47,277 --> 00:06:49,547
Now definitely feel free to play around with it

141
00:06:49,547 --> 00:06:52,876
and have a look which fields Angular 2 created there.

142
00:06:52,876 --> 00:06:55,089
You will see the controls which is basically

143
00:06:55,089 --> 00:06:57,885
an object holding all the controls Angular 2 knows.

144
00:06:57,885 --> 00:07:00,109
Here, that's only the content control.

145
00:07:00,109 --> 00:07:04,829
Again this is the name I assigned in the template,

146
00:07:04,829 --> 00:07:07,511
here with this attribute.

147
00:07:07,511 --> 00:07:10,195
And then you can see on this content control,

148
00:07:10,195 --> 00:07:13,217
you get more fields and so on.

149
00:07:13,217 --> 00:07:16,628
A very important field on the overall form

150
00:07:16,628 --> 00:07:19,414
is this value field here which holds

151
00:07:19,414 --> 00:07:22,304
an object representing the value of the form,

152
00:07:22,304 --> 00:07:25,805
again with the content control, the name we set up,

153
00:07:25,805 --> 00:07:28,358
and then the value we entered.

154
00:07:28,358 --> 00:07:31,919
Now since we got this value field here,

155
00:07:31,919 --> 00:07:36,406
it's very easy to go back to the type script code,

156
00:07:36,406 --> 00:07:39,759
comment that in again, remove the console log,

157
00:07:39,759 --> 00:07:43,509
and here simply take form.content as a value,

158
00:07:45,589 --> 00:07:48,089
form.value.content, excuse me.

159
00:07:49,430 --> 00:07:53,638
This will populate the content of this newly created message

160
00:07:53,638 --> 00:07:57,323
with the value entered into the content input field

161
00:07:57,323 --> 00:07:59,023
in our form.

162
00:07:59,023 --> 00:08:01,586
And with that, we're using the template driven approach

163
00:08:01,586 --> 00:08:03,426
to now submit this.

164
00:08:03,426 --> 00:08:06,250
And we can enhance this a bit more

165
00:08:06,250 --> 00:08:09,051
by now after all of this has been done,

166
00:08:09,051 --> 00:08:12,634
calling form and then resetForm, like that.

167
00:08:15,637 --> 00:08:20,628
So if I just save this, let's see the new application here.

168
00:08:20,628 --> 00:08:24,186
I will reload this and add something,

169
00:08:24,186 --> 00:08:26,989
and if I click save, you see we create it,

170
00:08:26,989 --> 00:08:29,767
but now the form is reset thereafter,

171
00:08:29,767 --> 00:08:32,198
which means it now is empty again,

172
00:08:32,198 --> 00:08:34,444
the input is empty again.

173
00:08:34,444 --> 00:08:36,632
It means more than that though.

174
00:08:36,632 --> 00:08:39,403
In such a form, remember I can still submit

175
00:08:39,403 --> 00:08:42,391
an empty field, and I don't want that.

176
00:08:42,391 --> 00:08:44,444
I can go in my template

177
00:08:44,444 --> 00:08:48,319
and add the HTML5 value data required.

178
00:08:48,319 --> 00:08:49,517
This is not Angular 2.

179
00:08:49,517 --> 00:08:51,113
This is HTML5.

180
00:08:51,113 --> 00:08:53,312
But Angular 2 will recognise it

181
00:08:53,312 --> 00:08:56,663
and now knows this input is required,

182
00:08:56,663 --> 00:08:59,940
which means that now if I save this

183
00:08:59,940 --> 00:09:02,236
and I reload this one more time,

184
00:09:02,236 --> 00:09:05,984
and I type into there, you now see it has a red border

185
00:09:05,984 --> 00:09:07,305
because it is empty.

186
00:09:07,305 --> 00:09:08,954
It is invalid.

187
00:09:08,954 --> 00:09:11,803
Where does this red border come from?

188
00:09:11,803 --> 00:09:14,470
Well let's inspect this element.

189
00:09:15,433 --> 00:09:19,381
Here you can see this input got a couple

190
00:09:19,381 --> 00:09:23,221
of new things attached to it by Angular 2.

191
00:09:23,221 --> 00:09:25,277
And very important is this part here

192
00:09:25,277 --> 00:09:28,128
in the classes, in the CSS classes.

193
00:09:28,128 --> 00:09:31,003
We get form-control which is the bootstrap class,

194
00:09:31,003 --> 00:09:35,885
but we also get ng-pristine, ng-invalid, and ng-touched.

195
00:09:35,885 --> 00:09:38,976
These three classes are added by Angular 2,

196
00:09:38,976 --> 00:09:42,640
and they represent the state of this input.

197
00:09:42,640 --> 00:09:44,352
They tell us that it is pristine

198
00:09:44,352 --> 00:09:46,590
which means we haven't entered anything.

199
00:09:46,590 --> 00:09:49,340
It is invalid because it is empty

200
00:09:50,376 --> 00:09:52,512
even though we said that it is required,

201
00:09:52,512 --> 00:09:54,262
so it should not be empty.

202
00:09:54,262 --> 00:09:57,406
And it is touched because I clicked into it.

203
00:09:57,406 --> 00:10:00,516
If I reload the application and inspect this,

204
00:10:00,516 --> 00:10:04,069
you see now it's also invalid, but it's ng-untouched

205
00:10:04,069 --> 00:10:06,246
because I haven't clicked into it.

206
00:10:06,246 --> 00:10:08,848
And where's the red border coming from?

207
00:10:08,848 --> 00:10:13,468
Well that's a style I set up in my public style sheets,

208
00:10:13,468 --> 00:10:16,004
style CSS file down here.

209
00:10:16,004 --> 00:10:20,582
Any input which has ng-invalid and ng-touched

210
00:10:20,582 --> 00:10:22,771
gets the red border because I don't want

211
00:10:22,771 --> 00:10:25,255
to put the red border around inputs

212
00:10:25,255 --> 00:10:27,988
which are invalid but haven't been touched yet.

213
00:10:27,988 --> 00:10:31,745
The user had no chance of making them valid yet.

214
00:10:31,745 --> 00:10:34,616
This is what leads to the red border

215
00:10:34,616 --> 00:10:37,131
and what now means that if I click there

216
00:10:37,131 --> 00:10:40,903
and hit submit, I get this built-in error,

217
00:10:40,903 --> 00:10:43,225
but once I enter something, I am able to submit,

218
00:10:43,225 --> 00:10:45,362
and thereafter the form resets

219
00:10:45,362 --> 00:10:48,363
and it's not bordered by red because the classes

220
00:10:48,363 --> 00:10:49,422
are also reset.

221
00:10:49,422 --> 00:10:51,672
So this is again untouched.

222
00:10:52,744 --> 00:10:54,877
With that we're using the template driven approach

223
00:10:54,877 --> 00:10:58,347
to manage the creation of new messages,

224
00:10:58,347 --> 00:11:02,514
a huge step in developing this message's functionality.

