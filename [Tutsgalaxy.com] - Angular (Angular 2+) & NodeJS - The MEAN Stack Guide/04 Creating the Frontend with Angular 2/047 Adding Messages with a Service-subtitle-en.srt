1
00:00:01,682 --> 00:00:02,985
<v Narrator>For the time being,</v>

2
00:00:02,985 --> 00:00:05,608
I'll add console log here so that we can see

3
00:00:05,608 --> 00:00:09,011
the messages array after we added a new message.

4
00:00:09,011 --> 00:00:11,452
I want to you use it in my MessageInputComponent,

5
00:00:11,452 --> 00:00:13,920
though, where I have this onSave method.

6
00:00:13,920 --> 00:00:15,886
Here it would be great if I could access

7
00:00:15,886 --> 00:00:19,668
my message service and pass the value,

8
00:00:19,668 --> 00:00:22,416
or a new message based on this value,

9
00:00:22,416 --> 00:00:24,559
to this message service and store

10
00:00:24,559 --> 00:00:27,264
it in the message array there.

11
00:00:27,264 --> 00:00:29,706
Now, to do so, I need to inject it here,

12
00:00:29,706 --> 00:00:31,826
as I explained on the slides.

13
00:00:31,826 --> 00:00:33,816
The Angular 2 framework ships with

14
00:00:33,816 --> 00:00:37,483
its own dependency injector, which is a tool

15
00:00:38,335 --> 00:00:40,827
in the background which allows us to provide

16
00:00:40,827 --> 00:00:44,506
certain instances of certain objects in places

17
00:00:44,506 --> 00:00:47,136
in the application where we need to have them.

18
00:00:47,136 --> 00:00:49,553
So we're not going to instantiate this service

19
00:00:49,553 --> 00:00:52,569
on our own with the new keyword, like this.

20
00:00:52,569 --> 00:00:54,440
This is not how we'll do it.

21
00:00:54,440 --> 00:00:56,705
We will let Angular 2 handle this

22
00:00:56,705 --> 00:00:59,970
and get your readily instantiated instance

23
00:00:59,970 --> 00:01:03,477
directly served to our component here.

24
00:01:03,477 --> 00:01:05,493
How does this work?

25
00:01:05,493 --> 00:01:08,601
We add a constructor to this class here,

26
00:01:08,601 --> 00:01:10,805
and in this constructor, we set up

27
00:01:10,805 --> 00:01:13,178
an argument we expect to get.

28
00:01:13,178 --> 00:01:14,390
Let's all just store it in a private

29
00:01:14,390 --> 00:01:17,382
property named messageService.

30
00:01:17,382 --> 00:01:19,109
And now here's the important part:

31
00:01:19,109 --> 00:01:20,862
I assign a type to this.

32
00:01:20,862 --> 00:01:22,726
Type should be MessageService.

33
00:01:22,726 --> 00:01:26,893
Also, import this from ./message.service.

34
00:01:27,855 --> 00:01:31,471
Now, who's creator our message input component?

35
00:01:31,471 --> 00:01:33,170
That is Angular 2.

36
00:01:33,170 --> 00:01:34,814
So, when Angular 2 is creating it,

37
00:01:34,814 --> 00:01:36,847
it will execute the constructor,

38
00:01:36,847 --> 00:01:38,308
and there it will see that we

39
00:01:38,308 --> 00:01:41,417
expect to get this MessageService.

40
00:01:41,417 --> 00:01:44,016
Now, since Angular 2 is doing all that,

41
00:01:44,016 --> 00:01:46,857
it kind of needs a way to be able to pass

42
00:01:46,857 --> 00:01:49,866
this instance of type MessageService to

43
00:01:49,866 --> 00:01:53,513
this MessageInputConponent when it creates it.

44
00:01:53,513 --> 00:01:55,107
In order for Angular 2 to be able

45
00:01:55,107 --> 00:01:57,438
to create this MessageService instance,

46
00:01:57,438 --> 00:02:00,053
we kind of need to tell it how to do that.

47
00:02:00,053 --> 00:02:02,280
But telling it is really simple.

48
00:02:02,280 --> 00:02:04,292
We do so by adding a new property to the

49
00:02:04,292 --> 00:02:07,813
object we passed to the component decorator.

50
00:02:07,813 --> 00:02:10,442
And this is named providers.

51
00:02:10,442 --> 00:02:14,609
This is an array of blueprints we want to tell Angular 2

52
00:02:15,602 --> 00:02:19,918
or we want to get Angular 2 to know for this component.

53
00:02:19,918 --> 00:02:23,582
Here, I'm telling Angular 2 "MessageService."

54
00:02:23,582 --> 00:02:25,579
I'm passing this passing this type as an argument

55
00:02:25,579 --> 00:02:28,985
or as an element in this providers array.

56
00:02:28,985 --> 00:02:31,643
By doing this, Angular 2 is able

57
00:02:31,643 --> 00:02:35,234
to create an instance of this MessageService

58
00:02:35,234 --> 00:02:37,132
and pass it to this constructor,

59
00:02:37,132 --> 00:02:38,710
where it then will be stored in this

60
00:02:38,710 --> 00:02:41,883
private messageService property.

61
00:02:41,883 --> 00:02:43,633
With this setup here,

62
00:02:44,776 --> 00:02:48,029
we're using Angular 2's dependency injector,

63
00:02:48,029 --> 00:02:50,530
which is doing all the rest in the background for us,

64
00:02:50,530 --> 00:02:52,528
creating this new MessageService instance,

65
00:02:52,528 --> 00:02:54,564
passing it to us, and so on.

66
00:02:54,564 --> 00:02:57,464
And then we can use it here in this component,

67
00:02:57,464 --> 00:03:00,126
and only here, not in any other component.

68
00:03:00,126 --> 00:03:01,991
That's important. We only injected

69
00:03:01,991 --> 00:03:04,241
it here in the constructor.

70
00:03:05,264 --> 00:03:08,085
You will find this concept of dependency injection

71
00:03:08,085 --> 00:03:11,063
in other languages, too, as a side note.

72
00:03:11,063 --> 00:03:13,902
So, here I can then access my messageService,

73
00:03:13,902 --> 00:03:16,636
and call addMessage to pass a new message.

74
00:03:16,636 --> 00:03:19,451
Though, I first need to create such a new message,

75
00:03:19,451 --> 00:03:23,618
so I will store it in a message constant, new Message.

76
00:03:24,529 --> 00:03:28,696
I therefore need to import my message from ./message.model.

77
00:03:31,045 --> 00:03:34,365
And here, I want to pass the value as the content,

78
00:03:34,365 --> 00:03:36,467
and then let's say Max as the offer.

79
00:03:36,467 --> 00:03:38,939
And other fields are optional anyways.

80
00:03:38,939 --> 00:03:41,513
With that, I can pass this newly created message

81
00:03:41,513 --> 00:03:44,314
as an argument to the addMessage method,

82
00:03:44,314 --> 00:03:47,352
which should store it in this array.

83
00:03:47,352 --> 00:03:51,710
Now, let's save this and see this in action.

84
00:03:51,710 --> 00:03:56,313
If I open up the console here, reload the application.

85
00:03:56,313 --> 00:03:59,902
Clear the console and type "Something!" again.

86
00:03:59,902 --> 00:04:02,489
If I hit save, you see an array,

87
00:04:02,489 --> 00:04:05,508
which holds this message we just created.

88
00:04:05,508 --> 00:04:07,035
messageId and useIds, of course,

89
00:04:07,035 --> 00:04:09,596
undefined because I didn't pass it.

90
00:04:09,596 --> 00:04:11,741
If I add "Something 2!," you now see

91
00:04:11,741 --> 00:04:13,926
this array holds two messages.

92
00:04:13,926 --> 00:04:17,199
So, the storing of messages in this central

93
00:04:17,199 --> 00:04:20,057
array in this service does work.

94
00:04:20,057 --> 00:04:22,019
And this is how we use such a service

95
00:04:22,019 --> 00:04:24,353
to centralised certain things, to use it

96
00:04:24,353 --> 00:04:26,815
as a data storage, for example.

97
00:04:26,815 --> 00:04:28,584
Of course, storing the data is nice,

98
00:04:28,584 --> 00:04:30,617
but it would be even more useful if you could

99
00:04:30,617 --> 00:04:33,769
not only store it there but also retrieve it there

100
00:04:33,769 --> 00:04:37,602
after and output in our list of messages here.

101
00:04:38,951 --> 00:04:41,284
So, let's work on this next.

