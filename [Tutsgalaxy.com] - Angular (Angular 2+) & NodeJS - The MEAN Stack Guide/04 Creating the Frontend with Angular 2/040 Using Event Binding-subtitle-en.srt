1
00:00:01,498 --> 00:00:03,988
<v Instructor>Let's also see the opposite in action.</v>

2
00:00:03,988 --> 00:00:06,301
We pass data into our message component,

3
00:00:06,301 --> 00:00:09,421
now let's create a custom event to pass it

4
00:00:09,421 --> 00:00:12,511
from the message component back to the app component.

5
00:00:12,511 --> 00:00:15,198
Let's say we want to make this edit button work.

6
00:00:15,198 --> 00:00:16,680
We want to be able to click it

7
00:00:16,680 --> 00:00:18,051
and upon clicking it,

8
00:00:18,051 --> 00:00:20,531
we won't bring up an input field yet,

9
00:00:20,531 --> 00:00:22,141
but we want to change it

10
00:00:22,141 --> 00:00:25,141
to a static new content for example.

11
00:00:26,004 --> 00:00:28,278
So we want to hook up the edit button here.

12
00:00:28,278 --> 00:00:30,248
And we want to listen to the click event

13
00:00:30,248 --> 00:00:34,006
which we do by using parentheses, click, parentheses.

14
00:00:34,006 --> 00:00:35,778
And then whatever code you want to execute

15
00:00:35,778 --> 00:00:39,013
upon a click event between the quotation marks.

16
00:00:39,013 --> 00:00:41,301
You have a couple of other events available, too.

17
00:00:41,301 --> 00:00:43,451
Basically all the default DOM events

18
00:00:43,451 --> 00:00:44,880
you have on an element.

19
00:00:44,880 --> 00:00:47,701
And you can find them out by simply visiting

20
00:00:47,701 --> 00:00:50,450
the references you find in the Internet on them,

21
00:00:50,450 --> 00:00:53,649
or simply print such an element to the JavaScript Console

22
00:00:53,649 --> 00:00:55,340
and inspect it there.

23
00:00:55,340 --> 00:00:58,260
Use all events which are normally named On,

24
00:00:58,260 --> 00:01:00,788
click and so on, without the On

25
00:01:00,788 --> 00:01:03,398
and then just while the other part

26
00:01:03,398 --> 00:01:05,169
click, mouse over, whatever,

27
00:01:05,169 --> 00:01:08,002
with a lower-case starting letter.

28
00:01:09,108 --> 00:01:13,180
With that, I hooked up this link to the click listener,

29
00:01:13,180 --> 00:01:17,263
and then here let's say I want to execute onEdit.

30
00:01:18,220 --> 00:01:20,700
Now this will execute the onEdit method

31
00:01:20,700 --> 00:01:22,590
in my message component tied to the file

32
00:01:22,590 --> 00:01:24,440
in this class to be precise,

33
00:01:24,440 --> 00:01:26,142
which of course doesn't exist.

34
00:01:26,142 --> 00:01:29,491
So let me quickly create the onEdit method.

35
00:01:29,491 --> 00:01:31,741
With that I can now log,

36
00:01:31,741 --> 00:01:34,158
or that's a log, let's alert.

37
00:01:35,769 --> 00:01:39,820
It worked, just to see if this, well, works.

38
00:01:39,820 --> 00:01:43,410
So after saving this and reloading the application,

39
00:01:43,410 --> 00:01:45,026
if we click the Edit button,

40
00:01:45,026 --> 00:01:46,252
we see it worked.

41
00:01:46,252 --> 00:01:48,899
So we hooked up this Edit button to the event.

42
00:01:48,899 --> 00:01:52,499
The next step, of course, is to now pass this event

43
00:01:52,499 --> 00:01:54,991
onto the app component.

44
00:01:54,991 --> 00:01:58,069
Now we can't listen to events in these child components

45
00:01:58,069 --> 00:01:59,489
in our app component,

46
00:01:59,489 --> 00:02:01,282
and that is good because we certainly don't want

47
00:02:01,282 --> 00:02:04,258
to get all the events which occur there,

48
00:02:04,258 --> 00:02:07,780
but we can explicitly create an event which we pass there.

49
00:02:07,780 --> 00:02:10,512
You learned about this in these slides before.

50
00:02:10,512 --> 00:02:12,985
At output is the key here.

51
00:02:12,985 --> 00:02:17,051
This all needs to be imported from @angular/core

52
00:02:17,051 --> 00:02:18,480
and then you need parentheses

53
00:02:18,480 --> 00:02:20,660
just like we're using at input.

54
00:02:20,660 --> 00:02:22,510
You could assign an alias which you use

55
00:02:22,510 --> 00:02:24,862
outside of this component, but I will not.

56
00:02:24,862 --> 00:02:27,768
And then choose any event name you want,

57
00:02:27,768 --> 00:02:30,192
I'll name it editClicked.

58
00:02:30,192 --> 00:02:32,244
Now here's an important part,

59
00:02:32,244 --> 00:02:34,782
this is not just a normal property.

60
00:02:34,782 --> 00:02:36,262
It is an EventEmitter,

61
00:02:36,262 --> 00:02:39,251
which is an object Angular2 offers you.

62
00:02:39,251 --> 00:02:42,014
So let's create a new EventEmitter here,

63
00:02:42,014 --> 00:02:44,216
which is basically an object which,

64
00:02:44,216 --> 00:02:45,266
as the name sounds,

65
00:02:45,266 --> 00:02:48,462
it allows us to create or emit events,

66
00:02:48,462 --> 00:02:50,984
and also listen to them.

67
00:02:50,984 --> 00:02:55,622
So this also has to be imported from @angular/core

68
00:02:55,622 --> 00:02:58,772
and this new EventEmitter is a generic type.

69
00:02:58,772 --> 00:03:00,531
If you don't know what generics are,

70
00:03:00,531 --> 00:03:04,751
basically generics are a feature TypeScript offers us,

71
00:03:04,751 --> 00:03:06,764
they also exist in other languages,

72
00:03:06,764 --> 00:03:08,755
which allow you to create classes,

73
00:03:08,755 --> 00:03:10,280
like EventEmitter here,

74
00:03:10,280 --> 00:03:13,485
which can use multiple types.

75
00:03:13,485 --> 00:03:16,253
The EventEmitter doesn't care which type of data

76
00:03:16,253 --> 00:03:19,488
you pass or use in the event.

77
00:03:19,488 --> 00:03:21,521
But it would be nice to tell it

78
00:03:21,521 --> 00:03:23,278
at the point of time you create it.

79
00:03:23,278 --> 00:03:27,121
So therefore here, I know I will simply pass a string,

80
00:03:27,121 --> 00:03:28,514
so I will do this

81
00:03:28,514 --> 00:03:30,986
by using a lower-than and a greater-than sign,

82
00:03:30,986 --> 00:03:31,819
and in between,

83
00:03:31,819 --> 00:03:36,751
the type of data I will use in this EventEmitter string.

84
00:03:36,751 --> 00:03:38,777
If you don't know which data you will use,

85
00:03:38,777 --> 00:03:41,142
you could use any, by the way.

86
00:03:41,142 --> 00:03:44,028
So with that I can now in the onEdit method,

87
00:03:44,028 --> 00:03:46,149
use my editClick property,

88
00:03:46,149 --> 00:03:48,105
which is this EventEmitter in the end,

89
00:03:48,105 --> 00:03:50,313
and then call the emit method,

90
00:03:50,313 --> 00:03:52,892
which means emit a new event.

91
00:03:52,892 --> 00:03:54,324
And here as an argument,

92
00:03:54,324 --> 00:03:57,084
I can pass any data I want to pass.

93
00:03:57,084 --> 00:03:59,124
You don't have to but you can.

94
00:03:59,124 --> 00:04:01,849
And here I want to pass a new value.

95
00:04:01,849 --> 00:04:04,553
This is the new string I want to assign

96
00:04:04,553 --> 00:04:06,404
as a message content.

97
00:04:06,404 --> 00:04:09,520
Of course, choose the value you want to use.

98
00:04:09,520 --> 00:04:11,412
Now this emits my own event,

99
00:04:11,412 --> 00:04:16,020
it also makes it listenable from outside by adding @Output.

100
00:04:16,020 --> 00:04:18,498
The last step is to listen to it.

101
00:04:18,498 --> 00:04:21,762
So in the app component which is the parent component,

102
00:04:21,762 --> 00:04:25,273
here I will add a new thing to my app-message selector.

103
00:04:25,273 --> 00:04:27,372
To this element I created.

104
00:04:27,372 --> 00:04:30,018
I will listen to my own event.

105
00:04:30,018 --> 00:04:32,393
So here I use parentheses again,

106
00:04:32,393 --> 00:04:36,560
and then editClicked which is the event name I chose here

107
00:04:38,010 --> 00:04:40,153
and then whatever code I want to execute.

108
00:04:40,153 --> 00:04:44,964
So like before with just click, the built-in event,

109
00:04:44,964 --> 00:04:46,942
now I'm listening to my own event,

110
00:04:46,942 --> 00:04:48,804
but I do the same thing with it.

111
00:04:48,804 --> 00:04:51,542
I execute some code once it appears.

112
00:04:51,542 --> 00:04:52,775
And here I could listen

113
00:04:52,775 --> 00:04:56,269
or I could create a new method to which I want to execute,

114
00:04:56,269 --> 00:04:58,032
but I could also simply say

115
00:04:58,032 --> 00:05:01,732
message.content equals and now what?

116
00:05:01,732 --> 00:05:06,313
I want it to equal the content I pass through the event.

117
00:05:06,313 --> 00:05:09,202
So this a new value string.

118
00:05:09,202 --> 00:05:11,902
Now Angular2 gives you a generic way

119
00:05:11,902 --> 00:05:15,509
to access the value passed through a custom event.

120
00:05:15,509 --> 00:05:17,260
Dollar-sign event,

121
00:05:17,260 --> 00:05:18,677
this object here,

122
00:05:19,513 --> 00:05:22,301
this built-in object which gets available

123
00:05:22,301 --> 00:05:25,267
or is made available when you listen to events,

124
00:05:25,267 --> 00:05:27,609
always holds the value you pass.

125
00:05:27,609 --> 00:05:32,239
That's just something you have to keep in mind, $event.

126
00:05:32,239 --> 00:05:35,137
So with this I am assigning the value I pass

127
00:05:35,137 --> 00:05:38,759
through the event to my message.content field

128
00:05:38,759 --> 00:05:42,379
while of this message property I create here.

129
00:05:42,379 --> 00:05:44,480
With that, if I save it,

130
00:05:44,480 --> 00:05:46,950
and then reload my application,

131
00:05:46,950 --> 00:05:49,697
let's see what happens if I click Edit.

132
00:05:49,697 --> 00:05:50,668
You see that?

133
00:05:50,668 --> 00:05:53,262
We changed this to a new value here.

134
00:05:53,262 --> 00:05:55,496
Let's see it again.

135
00:05:55,496 --> 00:05:58,752
Bam. This is how you sent up your own event,

136
00:05:58,752 --> 00:06:00,661
how you use it to pass data,

137
00:06:00,661 --> 00:06:02,259
and how you listen to it.

138
00:06:02,259 --> 00:06:04,006
And now a very powerful feature

139
00:06:04,006 --> 00:06:06,260
to be able to not only pass data

140
00:06:06,260 --> 00:06:08,758
from a parent to a child component,

141
00:06:08,758 --> 00:06:10,768
but also do it the other way around.

142
00:06:10,768 --> 00:06:12,786
From the child to the parent component,

143
00:06:12,786 --> 00:06:14,703
through a custom event.

