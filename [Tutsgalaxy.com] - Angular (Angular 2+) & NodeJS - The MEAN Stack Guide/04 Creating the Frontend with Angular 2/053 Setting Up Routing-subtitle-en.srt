1
00:00:01,691 --> 00:00:04,320
<v Instructor>In order to set up routing,</v>

2
00:00:04,320 --> 00:00:06,419
I will create a new file in the app folder

3
00:00:06,419 --> 00:00:08,800
and name it "app.routing.ts"

4
00:00:08,800 --> 00:00:11,149
Angular 2 ships with a built-in router.

5
00:00:11,149 --> 00:00:12,869
This router is very powerful,

6
00:00:12,869 --> 00:00:15,459
but we need to tell it which routes our application has,

7
00:00:15,459 --> 00:00:16,939
of course.

8
00:00:16,939 --> 00:00:19,589
Telling it is very simple, though.

9
00:00:19,589 --> 00:00:21,691
We do it in this file.

10
00:00:21,691 --> 00:00:24,211
Here I want to create a constant

11
00:00:24,211 --> 00:00:26,789
which I name APP_ROUTES, this name is up to you,

12
00:00:26,789 --> 00:00:28,731
which is of type: Routes.

13
00:00:28,731 --> 00:00:33,040
This is a type provided by the @angular router package.

14
00:00:33,040 --> 00:00:36,499
This type expects us to provide an array of routes,

15
00:00:36,499 --> 00:00:39,880
where each route is represented by a Javascript object,

16
00:00:39,880 --> 00:00:41,400
like this.

17
00:00:41,400 --> 00:00:44,040
And each route then has a path,

18
00:00:44,040 --> 00:00:47,699
which is the part we see in the URL after the slash.

19
00:00:47,699 --> 00:00:50,419
So something like "/auth", for example,

20
00:00:50,419 --> 00:00:52,586
or "/messages".

21
00:00:54,624 --> 00:00:56,099
Let's indeed use this.

22
00:00:56,099 --> 00:00:58,579
Let's create a 'messages' path

23
00:00:58,579 --> 00:01:00,976
to load our messages component.

24
00:01:00,976 --> 00:01:03,040
To tell Angular 2 to load this component,

25
00:01:03,040 --> 00:01:04,859
I add another property to this object

26
00:01:04,859 --> 00:01:06,619
which is named "component,"

27
00:01:06,619 --> 00:01:10,799
and where I point to my messages component like this.

28
00:01:10,799 --> 00:01:14,966
Also imported from ./messages/messages.component.

29
00:01:16,497 --> 00:01:18,468
With this, I set up a route,

30
00:01:18,468 --> 00:01:20,549
but Angular 2 isn't aware of it yet.

31
00:01:20,549 --> 00:01:22,339
We will add it soon.

32
00:01:22,339 --> 00:01:26,889
I will duplicate this to also provide an auth route,

33
00:01:26,889 --> 00:01:29,721
where I load my authentication component,

34
00:01:29,721 --> 00:01:31,841
and also add this import.

35
00:01:31,841 --> 00:01:34,688
And finally, I also want to handle the case

36
00:01:34,688 --> 00:01:39,399
that the user simply visits this route here, / nothing.

37
00:01:39,399 --> 00:01:42,249
To do this, I will duplicate the first route,

38
00:01:42,249 --> 00:01:44,618
and set the path to nothing,

39
00:01:44,618 --> 00:01:47,433
and then here I want to redirect

40
00:01:47,433 --> 00:01:49,600
to '/messages'.

41
00:01:50,979 --> 00:01:53,928
This will lead to this route always resolving

42
00:01:53,928 --> 00:01:55,949
in a redirection to,

43
00:01:55,949 --> 00:01:59,075
and now this is important, '/messages' means,

44
00:01:59,075 --> 00:02:04,037
always use your domain and then append '/messages' directly.

45
00:02:04,037 --> 00:02:06,197
If I would have just 'messages',

46
00:02:06,197 --> 00:02:08,349
it would always append 'messages'

47
00:02:08,349 --> 00:02:10,297
to the end of the existing path,

48
00:02:10,297 --> 00:02:12,789
which could be localhost/user,

49
00:02:12,789 --> 00:02:16,419
and I don't want to go to localhost/user/messages,

50
00:02:16,419 --> 00:02:19,459
but I always want to go to localhost/messages,

51
00:02:19,459 --> 00:02:22,467
which is why I use an absolute path here.

52
00:02:22,467 --> 00:02:25,917
I also need to add another property here,

53
00:02:25,917 --> 00:02:27,648
which is called pathMatch,

54
00:02:27,648 --> 00:02:29,557
and I will set this to 'full'.

55
00:02:29,557 --> 00:02:31,619
Why do I need this?

56
00:02:31,619 --> 00:02:33,671
The Angular 2 router works in a way

57
00:02:33,671 --> 00:02:37,068
that by default, it tries to match any part

58
00:02:37,068 --> 00:02:40,369
of the path with the path you set up here.

59
00:02:40,369 --> 00:02:43,329
Now the problem with the empty path is,

60
00:02:43,329 --> 00:02:45,329
every path includes this.

61
00:02:45,329 --> 00:02:48,169
Even if you have /messages,

62
00:02:48,169 --> 00:02:50,375
you have this invisible empty part

63
00:02:50,375 --> 00:02:54,369
between the domain and your path thereafter.

64
00:02:54,369 --> 00:02:57,318
So the empty path is always present.

65
00:02:57,318 --> 00:03:00,038
Therefore, if we don't add pathMatch: 'full',

66
00:03:00,038 --> 00:03:02,366
which overrides the default behaviour,

67
00:03:02,366 --> 00:03:05,486
Angular 2 would always redirect to 'messages',

68
00:03:05,486 --> 00:03:08,406
even if we visit /auth.

69
00:03:08,406 --> 00:03:11,889
With pathMatch: 'full', we tell Angular 2,

70
00:03:11,889 --> 00:03:16,056
"only react to this path if this is the full path."

71
00:03:16,949 --> 00:03:19,338
So not if it is included here,

72
00:03:19,338 --> 00:03:22,445
but if there is nothing else, then this path.

73
00:03:22,445 --> 00:03:24,654
With that, we get the desired behaviour

74
00:03:24,654 --> 00:03:27,516
that we only redirect to /messages

75
00:03:27,516 --> 00:03:31,580
if you visit the root page, so localhost/ nothing,

76
00:03:31,580 --> 00:03:34,260
and not any other route.

77
00:03:34,260 --> 00:03:36,490
Well, with that, the routes are set up,

78
00:03:36,490 --> 00:03:39,071
though Angular 2 still isn't aware of them.

79
00:03:39,071 --> 00:03:40,172
To make it aware,

80
00:03:40,172 --> 00:03:43,932
we use the built-in RouterModule Angular 2 ships with,

81
00:03:43,932 --> 00:03:47,082
which needs to import it from @angular/router,

82
00:03:47,082 --> 00:03:49,401
and there we can register new routes

83
00:03:49,401 --> 00:03:52,351
with the forRoot method.

84
00:03:52,351 --> 00:03:54,684
And here we pass our routes.

85
00:03:55,722 --> 00:03:57,892
This registers our routes

86
00:03:57,892 --> 00:04:02,151
in the Angular 2 RouterModule for our application.

87
00:04:02,151 --> 00:04:05,589
Now the last step is to import this RouterModule

88
00:04:05,589 --> 00:04:07,271
in the AppModule,

89
00:04:07,271 --> 00:04:11,060
though if I were to import RouterModule like this,

90
00:04:11,060 --> 00:04:12,532
it would not work,

91
00:04:12,532 --> 00:04:15,700
because that would mean the RouterModule

92
00:04:15,700 --> 00:04:17,892
without our custom routes.

93
00:04:17,892 --> 00:04:22,551
So we need to re-export this modified RouterModule here,

94
00:04:22,551 --> 00:04:26,069
therefore I will export a constant named 'routing'

95
00:04:26,069 --> 00:04:30,236
which I assign to RouterModule.forRoot and then our routes.

96
00:04:31,852 --> 00:04:35,940
Therefore now in the imports array in our AppModule,

97
00:04:35,940 --> 00:04:40,779
I can simply import routing from ./app.routing,

98
00:04:40,779 --> 00:04:43,781
so also add this import path here.

99
00:04:43,781 --> 00:04:45,932
With this, I make this module,

100
00:04:45,932 --> 00:04:48,383
this RouterModule with our custom routes,

101
00:04:48,383 --> 00:04:50,554
available in this application,

102
00:04:50,554 --> 00:04:51,983
I register it here,

103
00:04:51,983 --> 00:04:55,412
and Angular 2 is now aware of our routes.

104
00:04:55,412 --> 00:04:57,154
We can already see this in action,

105
00:04:57,154 --> 00:05:00,234
though we first need to give Angular 2 a place

106
00:05:00,234 --> 00:05:02,282
to render these routes.

107
00:05:02,282 --> 00:05:04,074
It's nice that we set up that we want

108
00:05:04,074 --> 00:05:06,452
to load the MessagesComponent in this case,

109
00:05:06,452 --> 00:05:09,343
and the AuthenticationComponent in this case,

110
00:05:09,343 --> 00:05:11,692
but where should we load it?

111
00:05:11,692 --> 00:05:14,274
In order to give Angular 2 a place,

112
00:05:14,274 --> 00:05:16,399
I will now add a horizontal line

113
00:05:16,399 --> 00:05:18,852
in the AppComponent HTML file,

114
00:05:18,852 --> 00:05:23,274
and add a new built-in directive here, &lt;router-outlet&gt;.

115
00:05:23,274 --> 00:05:24,722
It looks like a component,

116
00:05:24,722 --> 00:05:27,681
but it simply is a directive telling Angular 2,

117
00:05:27,681 --> 00:05:29,914
"Here is the place where you should load

118
00:05:29,914 --> 00:05:32,532
"the router loaded components."

119
00:05:32,532 --> 00:05:33,892
So this will be the place

120
00:05:33,892 --> 00:05:36,181
where these components will be rendered.

121
00:05:36,181 --> 00:05:40,503
So let's save this, and then reload the application,

122
00:05:40,503 --> 00:05:43,852
and now you see I instantly get redirected to /messages,

123
00:05:43,852 --> 00:05:44,953
which is great.

124
00:05:44,953 --> 00:05:48,543
And if I click on /auth, or enter /auth here,

125
00:05:48,543 --> 00:05:49,882
I go there.

126
00:05:49,882 --> 00:05:52,882
Of course, these links don't work though,

127
00:05:52,882 --> 00:05:55,223
because, well, we haven't hooked them up.

128
00:05:55,223 --> 00:05:56,806
Let's do this next.

