1
00:00:01,811 --> 00:00:04,171
<v ->In last lecture, we saved data to the database.</v>

2
00:00:04,171 --> 00:00:08,248
Time to now get it back and show in our review.

3
00:00:08,248 --> 00:00:09,939
To do so, I'll go to the get route,

4
00:00:09,939 --> 00:00:12,659
which is the route rendering our page,

5
00:00:12,659 --> 00:00:17,174
and here, I now wanna access my database and get something.

6
00:00:17,174 --> 00:00:19,814
Now, when we created a user, we created a new user

7
00:00:19,814 --> 00:00:23,523
with the new user command here with the constructor.

8
00:00:23,523 --> 00:00:27,196
How do we retrieve data from the database?

9
00:00:27,196 --> 00:00:28,829
It's very simple.

10
00:00:28,829 --> 00:00:32,263
We use this user variable we created

11
00:00:32,263 --> 00:00:35,391
up here, which holds our user model,

12
00:00:35,391 --> 00:00:38,143
and on this model, we can directly perform a couple

13
00:00:38,143 --> 00:00:41,053
of actions, and you can check out the mongoose documentation

14
00:00:41,053 --> 00:00:43,572
for a full list of available actions.

15
00:00:43,572 --> 00:00:45,943
You will see a lot throughout this course, though.

16
00:00:45,943 --> 00:00:49,708
One of them is find one to, as the name suggests,

17
00:00:49,708 --> 00:00:53,519
give us back one result, the first one typically.

18
00:00:53,519 --> 00:00:56,541
We can also pass, where we have to pass an argument

19
00:00:56,541 --> 00:00:59,410
to define which result you want to get back,

20
00:00:59,410 --> 00:01:01,989
but if I pass an empty object, it will simply give me

21
00:01:01,989 --> 00:01:04,490
the first one in the database.

22
00:01:04,490 --> 00:01:06,642
Then, the important part comes.

23
00:01:06,642 --> 00:01:09,042
We specify a callback here.

24
00:01:09,042 --> 00:01:10,922
This is important.

25
00:01:10,922 --> 00:01:14,241
We do not get the user by calling user find one

26
00:01:14,241 --> 00:01:16,010
and storing it in a variable

27
00:01:16,010 --> 00:01:17,930
because this is a asynchronous task.

28
00:01:17,930 --> 00:01:20,159
This will reach out to the database,

29
00:01:20,159 --> 00:01:23,071
and it may take a couple of seconds, so it will call

30
00:01:23,071 --> 00:01:27,090
this callback we pass as a second argument, once it is done.

31
00:01:27,090 --> 00:01:29,640
This callback will then, by mongoose,

32
00:01:29,640 --> 00:01:32,621
receive either the error, this can be null

33
00:01:32,621 --> 00:01:35,021
if no error occurred, otherwise we do have an error

34
00:01:35,021 --> 00:01:38,687
in this error variable here in this argument,

35
00:01:38,687 --> 00:01:40,940
or the document it retrieved.

36
00:01:40,940 --> 00:01:43,489
You may rename these arguments to whatever you like.

37
00:01:43,489 --> 00:01:47,250
I'll keep the two names I chose here.

38
00:01:47,250 --> 00:01:50,461
So we can now check if we got an error during the retrieval,

39
00:01:50,461 --> 00:01:52,711
in which case we could send

40
00:01:55,221 --> 00:01:57,318
a response where it will simply send some text,

41
00:01:57,318 --> 00:01:59,747
not even render a view for this case here,

42
00:01:59,747 --> 00:02:01,580
simply say error here.

43
00:02:02,868 --> 00:02:06,037
If we haven't got an error, and important,

44
00:02:06,037 --> 00:02:08,937
have the return keyword here, otherwise code execution,

45
00:02:08,937 --> 00:02:11,627
would continue even though you already sent the response.

46
00:02:11,627 --> 00:02:13,572
This is not what you want.

47
00:02:13,572 --> 00:02:15,564
So if we don't get into the if block,

48
00:02:15,564 --> 00:02:19,263
if we don't have an error, then I want to render my response

49
00:02:19,263 --> 00:02:21,313
only once we are finished.

50
00:02:21,313 --> 00:02:24,251
So not outside of this callback, this is important,

51
00:02:24,251 --> 00:02:28,364
we would render the view before this task here finished

52
00:02:28,364 --> 00:02:30,511
to do it inside of the callback.

53
00:02:30,511 --> 00:02:34,491
Here, I wanna render my node, HBS file,

54
00:02:34,491 --> 00:02:38,612
and pass an argument email, which holds my document,

55
00:02:38,612 --> 00:02:42,343
so this email we created or we fetched here.

56
00:02:42,343 --> 00:02:45,343
With that, let's return to node HBS,

57
00:02:46,490 --> 00:02:48,551
and here I wanna output this email,

58
00:02:48,551 --> 00:02:51,649
so again, with double curly braces to use handle bars,

59
00:02:51,649 --> 00:02:54,219
we can output email, and again, this is just a name

60
00:02:54,219 --> 00:02:57,860
I set up as the name for this property here,

61
00:02:57,860 --> 00:03:00,351
and this should give us this single email.

62
00:03:00,351 --> 00:03:01,889
Now, let's restart the server

63
00:03:01,889 --> 00:03:04,128
since we made some changes here,

64
00:03:04,128 --> 00:03:06,209
and then reload this page.

65
00:03:06,209 --> 00:03:08,959
Looks good, we're fetching the full object here,

66
00:03:08,959 --> 00:03:11,431
though I only wanted to get the email.

67
00:03:11,431 --> 00:03:14,769
So in order to do that, I can access doc,

68
00:03:14,769 --> 00:03:18,460
and then simply email, since this is the name of this field

69
00:03:18,460 --> 00:03:21,871
since you configured it to be like this in this user model,

70
00:03:21,871 --> 00:03:24,961
or in this schema for the model, to be precise.

71
00:03:24,961 --> 00:03:29,692
With that, if I restart the server again and reload again,

72
00:03:29,692 --> 00:03:32,098
now we're only outputting the email we created

73
00:03:32,098 --> 00:03:35,601
and this is how we can access it in the database.

74
00:03:35,601 --> 00:03:37,498
This is generally how we can fetch data

75
00:03:37,498 --> 00:03:39,999
from the database, key takeaway here:

76
00:03:39,999 --> 00:03:44,300
use any method to fetch data directly on the model,

77
00:03:44,300 --> 00:03:46,041
and then use it in this callback,

78
00:03:46,041 --> 00:03:48,460
including the rendering of responses.

79
00:03:48,460 --> 00:03:52,171
If you execute any code outside of this callback here,

80
00:03:52,171 --> 00:03:54,588
you won't have access to the data fetched

81
00:03:54,588 --> 00:03:56,641
because it is not there yet.

82
00:03:56,641 --> 00:03:58,291
This is important to understand here,

83
00:03:58,291 --> 00:04:00,960
and, as all the other things, you will see this a lot

84
00:04:00,960 --> 00:04:02,877
throughout this course.

