1
00:00:01,992 --> 00:00:04,484
<v Instructor>Now for hooking up the sign-in form</v>

2
00:00:04,484 --> 00:00:06,541
with the backend with the route I created

3
00:00:06,541 --> 00:00:10,476
in the last lecture, I'll start the auth service again.

4
00:00:10,476 --> 00:00:12,893
I will copy my signup method,

5
00:00:13,931 --> 00:00:16,261
now call it, of course, sign-in.

6
00:00:16,261 --> 00:00:20,072
But I will still expect to get the user being passed to it.

7
00:00:20,072 --> 00:00:23,572
Now, of course, the user will miss the first and last name,

8
00:00:23,572 --> 00:00:25,838
but it will have the password and email, which is the

9
00:00:25,838 --> 00:00:27,838
important data for me.

10
00:00:27,838 --> 00:00:32,005
Here in my URL, I then want to reach out to user/signin

11
00:00:34,038 --> 00:00:38,205
since this is the path I set up here in my user.js file.

12
00:00:39,438 --> 00:00:42,017
With this created, I'm passing the data,

13
00:00:42,017 --> 00:00:44,526
and this is really all the setup I need.

14
00:00:44,526 --> 00:00:47,137
Returning the observable allows me to subscribe to it

15
00:00:47,137 --> 00:00:49,665
to send this sign-in request.

16
00:00:49,665 --> 00:00:51,654
The other work I need to do, of course,

17
00:00:51,654 --> 00:00:53,945
is in the sign-in component here.

18
00:00:53,945 --> 00:00:58,534
Here, I, as in the signup component, want to override

19
00:00:58,534 --> 00:01:01,156
this behaviour here in the on submit method.

20
00:01:01,156 --> 00:01:05,404
Instead here, I will also create a new user, like this,

21
00:01:05,404 --> 00:01:09,571
and you need to import user from user.model here of course.

22
00:01:10,516 --> 00:01:12,964
And now I need to populate this.

23
00:01:12,964 --> 00:01:15,734
Now, I will only pass the first two arguments,

24
00:01:15,734 --> 00:01:18,234
the my form value email field,

25
00:01:19,277 --> 00:01:23,668
and then the my form value password field, since I only need

26
00:01:23,668 --> 00:01:26,548
to pass email and password.

27
00:01:26,548 --> 00:01:29,006
With this, I can then reach out to the auth service,

28
00:01:29,006 --> 00:01:31,838
but for this, of course, I also need to inject it.

29
00:01:31,838 --> 00:01:35,446
So let's inject the auth service here, and remember,

30
00:01:35,446 --> 00:01:38,686
I set up the provider in the app module, so no need

31
00:01:38,686 --> 00:01:41,638
to add providers here, you do need to add the import

32
00:01:41,638 --> 00:01:43,988
at the top, though.

33
00:01:43,988 --> 00:01:48,308
With this set up, I can now reach out to my auth service,

34
00:01:48,308 --> 00:01:51,308
to the sign-in method, and pass my user,

35
00:01:51,308 --> 00:01:53,838
before I then subscribe to the observable

36
00:01:53,838 --> 00:01:56,017
created in this method.

37
00:01:56,017 --> 00:01:58,100
Here, I do get some data,

38
00:01:59,121 --> 00:02:03,041
and this data is data I actually want to use,

39
00:02:03,041 --> 00:02:04,961
so I will do a couple of things with that

40
00:02:04,961 --> 00:02:07,132
in the function body here.

41
00:02:07,132 --> 00:02:10,590
Also, I will possibly get an error, which is simply

42
00:02:10,590 --> 00:02:13,340
one two error out to the console.

43
00:02:14,750 --> 00:02:18,012
But let's go back to this first callback where I do get data

44
00:02:18,012 --> 00:02:19,742
from the server.

45
00:02:19,742 --> 00:02:22,950
Here, you know, I get the token and to user id

46
00:02:22,950 --> 00:02:24,740
because this is what I passed down here

47
00:02:24,740 --> 00:02:26,907
with the success response.

48
00:02:27,809 --> 00:02:31,849
So, in order to use this, my sign-in component,

49
00:02:31,849 --> 00:02:33,628
I want to store it.

50
00:02:33,628 --> 00:02:36,337
Now, where do you store such a token?

51
00:02:36,337 --> 00:02:38,934
You basically do have two options.

52
00:02:38,934 --> 00:02:42,953
Your browser does come with some storage, local storage

53
00:02:42,953 --> 00:02:45,422
and session storage to be precise,

54
00:02:45,422 --> 00:02:47,833
and you can store it in a cookie.

55
00:02:47,833 --> 00:02:50,734
There are arguments for both.

56
00:02:50,734 --> 00:02:54,654
Basically, the local storage and session storage

57
00:02:54,654 --> 00:02:57,262
is accessible only while a java script,

58
00:02:57,262 --> 00:02:59,608
but doesn't the overhead means it's vulnerable

59
00:02:59,608 --> 00:03:01,917
to cross-side scripting attacks.

60
00:03:01,917 --> 00:03:04,914
If you can rule out such a text, if your application

61
00:03:04,914 --> 00:03:08,086
is very secure regarding this, which it should be anyways,

62
00:03:08,086 --> 00:03:10,955
then there is no way this token can be accessed

63
00:03:10,955 --> 00:03:13,496
from anyone else but you.

64
00:03:13,496 --> 00:03:15,326
On the other hand, cookies are not accessible

65
00:03:15,326 --> 00:03:19,174
by java script, so they are protected against this,

66
00:03:19,174 --> 00:03:22,287
but they are more complicated to submit,

67
00:03:22,287 --> 00:03:26,209
and they are vulnerable to other kinds of security issues

68
00:03:26,209 --> 00:03:28,889
against what you would have to protect.

69
00:03:28,889 --> 00:03:31,369
So both have their advantages and disadvantages.

70
00:03:31,369 --> 00:03:34,511
Of course, you are free to dive deeper into this

71
00:03:34,511 --> 00:03:38,119
and choose your favourite approach by, again,

72
00:03:38,119 --> 00:03:41,892
as dumb as it might sound, by simply Googling for either

73
00:03:41,892 --> 00:03:45,292
Angular 2 and cookies or Angular 2 and local storage.

74
00:03:45,292 --> 00:03:47,921
You will find examples for both and should be able

75
00:03:47,921 --> 00:03:50,040
to set this up in the way you need it.

76
00:03:50,040 --> 00:03:52,761
I will use the local storage here,

77
00:03:52,761 --> 00:03:54,703
which is the storage in the browser,

78
00:03:54,703 --> 00:03:56,641
which I assess like this.

79
00:03:56,641 --> 00:03:58,863
This is not an Angular 2 specific object,

80
00:03:58,863 --> 00:04:02,441
it's an object, one that like java script ships with.

81
00:04:02,441 --> 00:04:06,608
The local storage here allows me to store that in my browser

82
00:04:07,877 --> 00:04:11,271
and it will persist even if I close

83
00:04:11,271 --> 00:04:13,959
the existing browser window.

84
00:04:13,959 --> 00:04:16,179
That's, by the way, the difference to session storage

85
00:04:16,179 --> 00:04:17,871
where this will then be cleared.

86
00:04:17,871 --> 00:04:20,786
You may, of course, also choose session storage.

87
00:04:20,786 --> 00:04:23,444
Keep in mind that the token will invalidate

88
00:04:23,444 --> 00:04:26,295
after two hours anyways, though.

89
00:04:26,295 --> 00:04:30,404
So here, I can store something by using set item,

90
00:04:30,404 --> 00:04:34,455
and I want to set a token here and I want to store the token

91
00:04:34,455 --> 00:04:38,573
in the data I return, keep in mind, this data I return

92
00:04:38,573 --> 00:04:40,740
has this token field here.

93
00:04:42,105 --> 00:04:43,647
It also has the user id field,

94
00:04:43,647 --> 00:04:46,713
and I also want to store this user id,

95
00:04:46,713 --> 00:04:50,880
so I will also store user id, and x is my user id here.

96
00:04:52,641 --> 00:04:55,224
With that, I'm storing my data.

97
00:04:56,371 --> 00:05:00,233
The last thing I wanna do is, after doing so,

98
00:05:00,233 --> 00:05:05,103
I wanna navigate away, so I wanna leave this component here.

99
00:05:05,103 --> 00:05:08,853
To do this, I need to uncheck my router here,

100
00:05:09,732 --> 00:05:13,532
so here I will inject the Angular 2 router.

101
00:05:13,532 --> 00:05:17,699
Of course, it needs to be imported from @angular/router then

102
00:05:18,764 --> 00:05:21,484
and this allows me to hear also in this callback

103
00:05:21,484 --> 00:05:23,673
because I want to do this after all this data

104
00:05:23,673 --> 00:05:25,684
has been received and set.

105
00:05:25,684 --> 00:05:29,851
Here, I can access this router, and then navigate,

106
00:05:30,943 --> 00:05:34,993
or simply navigate by URL to go back to the root route

107
00:05:34,993 --> 00:05:38,153
off my application here since I want to go to the root page,

108
00:05:38,153 --> 00:05:40,901
which is the messages page.

109
00:05:40,901 --> 00:05:44,532
With this setup, if I now run mpm run build,

110
00:05:44,532 --> 00:05:48,204
we should be able to successfully log in,

111
00:05:48,204 --> 00:05:52,061
and receive such a token, and then navigate away.

112
00:05:52,061 --> 00:05:55,092
All to make sure to restart your node server,

113
00:05:55,092 --> 00:05:57,553
since we made some changes on the backend,

114
00:05:57,553 --> 00:05:59,611
and with that, let's head over to the application

115
00:05:59,611 --> 00:06:02,313
and sign a user in, make sure to use the same credentials

116
00:06:02,313 --> 00:06:05,576
as before when you created the user.

117
00:06:05,576 --> 00:06:08,328
This looks good, I'm redirected, now let's see

118
00:06:08,328 --> 00:06:10,856
if we do have the token.

119
00:06:10,856 --> 00:06:13,888
You can see it if we go in Chrome and the develop,

120
00:06:13,888 --> 00:06:16,080
and choose the application here,

121
00:06:16,080 --> 00:06:18,520
and then here you got your storages.

122
00:06:18,520 --> 00:06:21,061
Let's have a look at the local storage.

123
00:06:21,061 --> 00:06:24,272
Here, for our running application, we see the token

124
00:06:24,272 --> 00:06:27,280
and the user id field, both are populated,

125
00:06:27,280 --> 00:06:29,072
this looks great.

126
00:06:29,072 --> 00:06:30,970
So with this, we do have the token

127
00:06:30,970 --> 00:06:33,672
in our front-end application.

128
00:06:33,672 --> 00:06:36,461
The next step, of course, is to make our application

129
00:06:36,461 --> 00:06:39,680
more secure, and take advantage of this token

130
00:06:39,680 --> 00:06:43,471
by restricting who's able to create messages,

131
00:06:43,471 --> 00:06:46,971
and which messages you may delete or edit.

